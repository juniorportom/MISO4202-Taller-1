System.out.println("Se tienen recursos de bases de datos con algun recurso asociado: ");
DBSinAlmacenamiento().println();
System.out.println("Bases de datos configuradas");
DBSPorProveedorEspecifico().println();

operation DBSinAlmacenamiento():Boolean{
	return ServidorBD.allInstances.select(db|db.recursos.size() > 0).size() > 0;
}

operation DBSPorProveedorEspecifico():Boolean{
	//AmbienteDespliegue.allInstances.select(a|a.recursos)
	//Package>ClassUnit.all.select(cu | cu.name.substring(cu.name.length() - 4, cu.name.length()) <> "Test").Size().println();
	var correctaAsignacion = true;
	for(proveedor in ProveedorNube.allInstances){
		//proveedor.ambientedespliegue> ServidorBD.all.select(db|db.tipo.name.println() = "Relacional").println();
		if(proveedor.nombre == "AWS"){
			System.out.println("Proveedor AWS bien configurado: ");
				proveedor.ambientedespliegue>
				(
					(
						(ServidorBD.all.select(db|db.sistemaManejador = "PostgreSQL" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Oracle" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Aurora" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "MariaDB" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "MySQL" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "SQLServer" and db.tipo.name = "Relacional").size()) +
						
						(ServidorBD.all.select(db|db.sistemaManejador = "DocumentDB" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Dynamo" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Cassandra" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Redis" and db.tipo.name = "NoSql").size()) 
						 
					) = ServidorBD.all.size()
				
				).println();
			}
			if(proveedor.nombre == "GCP"){
				System.out.println("Proveedor GCP bien configurado: ");
				proveedor.ambientedespliegue>
				(
					(
						(ServidorBD.all.select(db|db.sistemaManejador = "MySQL" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "PostgreSQL" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "SQLServer" and db.tipo.name = "Relacional").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "CloudSpanner" and db.tipo.name = "Relacional").size()) +
						
						(ServidorBD.all.select(db|db.sistemaManejador = "BigTable" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Firestore" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Firebase" and db.tipo.name = "NoSql").size()) +
						(ServidorBD.all.select(db|db.sistemaManejador = "Redis" and db.tipo.name = "NoSql").size()) 
						 
					) = ServidorBD.all.size()
				
				).println();
			}		
		}	
	}	






/*
IMPARES
*/


/*
1
Validar que las CIDR se escriban de forma correcta. Las CIDR se definen de forma específica 
en el ​RFC 4632​, en nuestro caso debemos validar que el texto se escriba n.n.n.n/m, donde ​n​ 
corresponde a un número entre 0-255 y ​m​ un número entre 0-32.
*/

operation Subred isValidCIDR(): Boolean {
	"--> Prueba CIDR Block para ".concat(self.cidrBlock).println();
	return self.cidrBlock.matches("^(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]).([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]).([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]).([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2]))$");
}

/*
3
Validar que de acuerdo al tipo de regla especificado, los valores de protocolo y puerto 
deben ser los valores fijos dados en la tabla.
*/

operation Regla isValidRule(): Boolean {
	if ( self.tipo.matches("^(Custom TCP)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^([1-9][0-9][2-9][4-9]|6[0-5][0-5][0-3][0-5]|[1-5][0-9][0-9][0-9][0-9])$");
	} else if ( self.tipo.matches("^(Custom UDP)$") ) {
		return self.protocolo.matches("^(UDP)$") and self.puerto.matches("^([1-9][0-9][2-9][4-9]|6[0-5][0-5][0-3][0-5]|[1-5][0-9][0-9][0-9][0-9])$");
	} else if ( self.tipo.matches("^(DNS UDP)$") ) {
		return self.protocolo.matches("^(UDP)$") and self.puerto.matches("^(53)$");
	} else if ( self.tipo.matches("^(DNS TCP)$") ) {
		return self.protocolo.matches("^(UDP)$") and self.puerto.matches("^(53)$");
	} else if ( self.tipo.matches("^(HTTP)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(80)$");
	} else if ( self.tipo.matches("^(HTTPS)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(443)$");
	} else if ( self.tipo.matches("^(SSH)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(22)$");
	} else if ( self.tipo.matches("^(NFS)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(2049)$");
	} else if ( self.tipo.matches("^(PostgresSQL)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(5432)$");
	} else if ( self.tipo.matches("^(PostgresSQL)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(5432)$");
	} else if ( self.tipo.matches("^(MySQL/Aurora/MariaDB)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(3306)$");
	} else if ( self.tipo.matches("^(POP3)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(110)$");
	} else if ( self.tipo.matches("^(IMAP)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(143)$");
	} else if ( self.tipo.matches("^(LDAP)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(389)$");
	} else if ( self.tipo.matches("^(SMTP)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(25)$");
	} else if ( self.tipo.matches("^(Oracle)$") ) {
		return self.protocolo.matches("^(TCP)$") and self.puerto.matches("^(1521)$");
	} else {
		"--> Falla Validacion Regla [ Tipo : Protocolo : Puerto ] para ".concat(self.tipo).concat(" : ").concat(self.protocolo).concat(" : ").concat(self.puerto).println();
		return false;
	}
}

/*
5
Validar que de acuerdo al tipo de proveedor seleccionado (e.g., AWS, Azure) se estén 
aprovisionando recursos en zonas de disponibilidad apropiadas. A continuación, encontrarán 
dos tablas, una con las zonas de AWS y otra con las zonas de GCP:
*/

/*
Agrego Atributo en Recurso: zonaDisponibilidad, zonaNombre
*/

operation ProveedorNube isValidRegion(): Boolean {
	for ( ambiente in self.ambientedespliegue ) {
		for ( recurso in ambiente.recursos ) {
			if ( self.nombre.matches("^(AWS)$") ) {
				if ( 
				( recurso.zonaDisponibilidad.matches("^(us-east-2)$") and recurso.zonaNombre.matches("^(EE.UU. Este (Ohio))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-east-1)$") and recurso.zonaNombre.matches("^(US East (N. Virginia))$") ) or
				( recurso.zonaDisponibilidad.matches("^(us-west-1)$") and recurso.zonaNombre.matches("^(EE.UU. Oeste (Norte de California))$") ) or
				( recurso.zonaDisponibilidad.matches("^(us-east-2)$") and recurso.zonaNombre.matches("^(EE.UU. Oeste (Oregón))$") ) or
				( recurso.zonaDisponibilidad.matches("^(ap-east-1)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Hong Kong))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-south-1)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Mumbai))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-northeast-3)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Osaka-local))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-northeast-2)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Seúl))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-southeast-1)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Singapur))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-southeast-2)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Sídney))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ap-northeast-1)$") and recurso.zonaNombre.matches("^(Asia Pacífico (Tokio))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(ca-central-1)$") and recurso.zonaNombre.matches("^(Canadá (Central))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(eu-central-1)$") and recurso.zonaNombre.matches("^(Europa (Fráncfort))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(eu-west-1)$") and recurso.zonaNombre.matches("^(Europa (Irlanda))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(eu-west-2)$") and recurso.zonaNombre.matches("^(Europa (Londres))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(eu-west-3)$") and recurso.zonaNombre.matches("^(Europa (París))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(eu-north-1)$") and recurso.zonaNombre.matches("^(Europa (Estocolmo))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(me-south-1)$") and recurso.zonaNombre.matches("^(Medio Oriente (Baréin))$")    ) or
				( recurso.zonaDisponibilidad.matches("^(sa-east-1)$") and recurso.zonaNombre.matches("^(América del Sur (São Paulo))$")    )
				 ) {
				 continue;
				 } else {
				 "--> Falla AWS - Zona Disponibilidad [ Code : Nombre ] para ".concat(recurso.zonaDisponibilidad).concat(" : ").concat("recurso.zonaNombre").println();
				 	return false;
				 }
			} else if ( self.nombre.matches("^(GCP)$") ) {
				if ( 
				( recurso.zonaDisponibilidad.matches("^(asia-east1)$") and recurso.zonaNombre.matches("^(Condado de Changhua, Taiwán)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(asia-east2)$") and recurso.zonaNombre.matches("^(Hong Kong)$") ) or
				( recurso.zonaDisponibilidad.matches("^(asia-northeast1)$") and recurso.zonaNombre.matches("^(Tokio, Japón)$") ) or
				( recurso.zonaDisponibilidad.matches("^(asia-northeast2)$") and recurso.zonaNombre.matches("^(Osaka, Japón)$") ) or
				( recurso.zonaDisponibilidad.matches("^(asia-south1)$") and recurso.zonaNombre.matches("^(Bombay, India)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(asia-southeast1)$") and recurso.zonaNombre.matches("^(Jurong West, Singapur)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(australia-southeast1)$") and recurso.zonaNombre.matches("^(Sídney, Australia)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-north1)$") and recurso.zonaNombre.matches("^(Hamina, Finlandia)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-west1)$") and recurso.zonaNombre.matches("^(Saint-Ghislain, Bélgica)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-west2)$") and recurso.zonaNombre.matches("^(Londres, Inglaterra, Reino Unido)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-west3)$") and recurso.zonaNombre.matches("^(Fráncfort, Alemania)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-west4)$") and recurso.zonaNombre.matches("^(Puerto de Ems, Países Bajos)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(europe-west6)$") and recurso.zonaNombre.matches("^(Zúrich, Suiza)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(northamerica-northeast1)$") and recurso.zonaNombre.matches("^(Montreal, Quebec, Canadá)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(southamerica-east1)$") and recurso.zonaNombre.matches("^(Osasco (São Paulo), Brasil)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-central1)$") and recurso.zonaNombre.matches("^(Council Bluffs, Iowa, EE.UU.)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-east1)$") and recurso.zonaNombre.matches("^(Moncks Corner, Carolina del Sur, EE.UU.)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-east4)$") and recurso.zonaNombre.matches("^(Ashburn, Virginia, EE.UU.)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-west1)$") and recurso.zonaNombre.matches("^(The Dalles, Oregón, EE.UU.)$")    ) or
				( recurso.zonaDisponibilidad.matches("^(us-west2)$") and recurso.zonaNombre.matches("^(Los Ángeles, California, EE.UU.)$")    )
				 ) {
				 continue;
				 } else {
				 	"--> Falla GCP - Zona Disponibilidad [ Code : Nombre ] para ".concat(recurso.zonaDisponibilidad).concat(" : ").concat("recurso.zonaNombre").println();
				 	return false;
				 }
			}
			
		}
	}
	return true;
}

































