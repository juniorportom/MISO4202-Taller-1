

[*
Sebastian Garcia
Reinaldo Portocarrero 
*]


	
[%	
	var ceffective = Ceffective.all;
	var proveedor = ceffective.proveedorNube;
%]

# connection to AWS
provider "[%=proveedor.nombre %]" {
  profile    = "default"
  region     = "us-east-1"
}
#end connection to AWS


[%	
	var ambiente = AmbienteDespliegue.all;
	
	var vpcs = ambiente.vpc;
	for ( vpc in vpcs ) 
	{
		%]
		
# create the VPC
resource "aws_vpc" "[%=vpc.id %]" {
  cidr_block           = [%=vpc.cidrBlock %]
  instance_tenancy     = "default" 
  enable_dns_support   = true 
  enable_dns_hostnames = true
  
} 
# end VPC
		
		[%
	}
	
	var mecanismosSeguridad = ambiente.mecanismoseguridad;
	
	var iinternetGateways = mecanismosSeguridad.select( i | i.isTypeOf( mcf!InternetGateway ) );
	for ( mec in iinternetGateways )
	{
		%]
		
# create the security resource
resource "aws_[%=mec.nombre %]" "[%=mec.id %]" {
  vpc_id = [%=mec.vpc.id %]
}
# end security resouce
		
		[%
	}
	
	var subreds = mecanismosSeguridad.select( i | i.isTypeOf( mcf!Subred ) );
	for ( mec in subreds )
	{
		%]
		
# create the security resource
resource "aws_[%=mec.nombre %]" "[%=mec.id %]" {
  vpc_id = [%=mec.vpc.id %]
  cidr_block              = [%=mec.cidrBlock %]
  map_public_ip_on_launch = true 
  availability_zone       = [%=mec.zonaDisponibilidad %]		
}
# end security resouce
		
		[%
	}
	
	var securityGroups = mecanismosSeguridad.select( i | i.isTypeOf( mcf!GrupoSeguridad ) );
	for ( mec in securityGroups )
	{
		%]
		
# create the security resource
resource "aws_[%=mec.nombre %]" "[%=mec.id %]" {
  vpc_id = [%=mec.vpc.id %]
  name         = [%=mec.nombre %]
  description  = [%=mec.descripcion %]
  cidr_block              = [%=mec.cidrBlock %]
  map_public_ip_on_launch = true 
  availability_zone       = [%=mec.zonaDisponibilidad %]	
  
  [%
  
  		for ( regla in mec.regla )
  		{
  			var direccion =  "ingress";
  			if ( regla.direccion.matches("^(ENTRADA)$") )
  			{
  				direccion =  "ingress";
  			} 
  			else 
  			{
  				direccion =  "egress";
  			}
  			
  		%]
  		
 [%=direccion %] {
    cidr_blocks = [%=regla.cidrBlock %]
    from_port   = [%=mec.origin %]
    to_port     = [%=mec.puerto %]
    protocol    = [%=mec.protocolo %]
  }  		
  		
  		[%
  			
  		}
  
  %]
  	
}
# end security resouce
		
		[%
	}
	
%]








	
[%	
	var auth = proveedor.autenticacionUsuario;
	// TODO
%]


#Public key
resource "aws_key_pair" "ec2key" {
  key_name = "ec2key1"
  public_key = [%=auth %]
}
#end Public key






data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

#Resources





#Server instance
resource "aws_instance" "ec21" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.micro"
  key_name = aws_key_pair.ec2key.key_name
  vpc_security_group_ids = [aws_security_group.securitygroup1.id]
  subnet_id = aws_subnet.subnet1.id

}
#End server instane





resource "aws_db_subnet_group" "dbsubnet1" {
  name       = "dbsubnet1"
  subnet_ids = [aws_subnet.subnet1.id,aws_subnet.subnet2.id]
}




	
[%	
	var recursos = ambiente.recursos;
	// TODO
%]


#DB instance
resource "aws_db_instance" "db1" {
  name = "db1"
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  username             = "root"
  password             = "miso4202-202002"
  parameter_group_name = "default.mysql5.7"
  vpc_security_group_ids = [aws_security_group.securitygroup1.id]
  db_subnet_group_name = aws_db_subnet_group.dbsubnet1.name
}
#End db instance







#EBS instance
resource "aws_ebs_volume" "ebs1" {
  availability_zone = var.availabilityZone
  size              = 40
}
#end EBS instance







#EBS attachment
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.ebs1.id
  instance_id = aws_instance.ec21.id
}




	